{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../src/index.ts"],"sourcesContent":["const toString = Object.prototype.toString;\r\nconst kindOf = ((cache): any => {\r\n    return (thing: any): any => {\r\n        let str = toString.call(thing);\r\n        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\r\n    };\r\n})(Object.create(null));\r\n\r\nconst kindOfTest = (type: any): Function => {\r\n    type = type.toLowerCase();\r\n    return function isKindOf(thing: any): boolean {\r\n        return kindOf(thing) === type;\r\n    };\r\n}\r\n\r\n\r\nconst bind = (fn: any, thisArg: any): any => {\r\n    return function wrap() {\r\n        return fn.apply(thisArg, arguments);\r\n    };\r\n}\r\n\r\n/**\r\n * 判断一个值是否为数组\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是数组，则为 true，否则为 false\r\n */\r\nexport const isArray = (val: any): boolean => {\r\n    return Array.isArray(val);\r\n}\r\n\r\n/**\r\n * 判断一个值是否为 undefined\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是 undefined，则为 true，否则为 false\r\n */\r\nexport const isUndefined = (val: any): boolean => {\r\n    return typeof val === 'undefined';\r\n}\r\n\r\n/**\r\n * 判断一个值是否为 Buffer\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是 Buffer，则为 true，否则为 false\r\n */\r\nexport const isBuffer = (val: any): boolean => {\r\n    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\r\n        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\r\n}\r\n\r\n/**\r\n * 判断一个值是否为 ArrayBuffer\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是 ArrayBuffer，则为 true，否则为 false\r\n */\r\nexport const isArrayBuffer = kindOfTest('ArrayBuffer');\r\n\r\n\r\n/**\r\n * 判断一个值是否为 ArrayBuffer 的视图\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是 ArrayBuffer 的视图，则为 true，否则为 false\r\n */\r\nexport const isArrayBufferView = (val: any): boolean => {\r\n    let result;\r\n    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\r\n        result = ArrayBuffer.isView(val);\r\n    } else {\r\n        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 判断一个值是否为字符串\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是字符串，则为 true，否则为 false\r\n */\r\nexport const isString = (val: any): boolean => {\r\n    return typeof val === 'string';\r\n}\r\n\r\n/**\r\n * 确定一个值是否为数字\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是数字，则为true，否则为false\r\n */\r\nexport const isNumber = (val: any): boolean => {\r\n    return typeof val === 'number' && isFinite(val);\r\n}\r\n\r\n/**\r\n * 确定一个值是否为对象\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是对象，则为true，否则为false\r\n */\r\nexport const isObject = (val: any): boolean => {\r\n    return val != null && typeof val === 'object' && Array.isArray(val) === false;\r\n}\r\n\r\n/**\r\n * 确定一个值是否为普通对象\r\n *\r\n * @param {Object} val 要测试的值\r\n * @return {boolean} 如果值是普通对象，则为true，否则为false\r\n */\r\nexport const isPlainObject = (val: any): boolean => {\r\n    if (kindOf(val) !== 'object') {\r\n        return false;\r\n    }\r\n\r\n    let prototype = Object.getPrototypeOf(val);\r\n    return prototype === null || prototype === Object.prototype;\r\n}\r\n\r\n/**\r\n * 确定一个值是否为日期\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是日期，则为true，否则为false\r\n */\r\nexport const isDate = kindOfTest('Date');\r\n\r\n/**\r\n * 确定一个值是否为文件\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是文件，则为true，否则为false\r\n */\r\nexport const isFile = kindOfTest('File');\r\n\r\n/**\r\n * 确定一个值是否为布尔值\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是布尔值，则为true，否则为false\r\n */\r\nexport const isBlob = kindOfTest('Blob');\r\n\r\n/**\r\n * 确定一个值是否为文件列表\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是文件列表，则为true，否则为false\r\n */\r\nexport const isFileList = kindOfTest('FileList');\r\n\r\n/**\r\n * 确定一个值是否为函数\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是函数，则为true，否则为false\r\n */\r\nexport const isFunction = (val: any): boolean => {\r\n    return toString.call(val) === '[object Function]';\r\n}\r\n\r\n/**\r\n * 确定一个值是否为流\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是流，则为true，否则为false\r\n */\r\nexport const isStream = (val: any): boolean => {\r\n    return isObject(val) && isFunction(val.pipe);\r\n}\r\n\r\n/**\r\n * 确定一个值是否为FormData\r\n *\r\n * @param {Object} thing 要测试的值\r\n * @returns {boolean} 如果值是FormData，则为true，否则为false\r\n */\r\nexport const isFormData = (thing: any): boolean => {\r\n    let pattern = '[object FormData]';\r\n    return thing && (\r\n        (typeof FormData === 'function' && thing instanceof FormData) ||\r\n        toString.call(thing) === pattern ||\r\n        (isFunction(thing.toString) && thing.toString() === pattern)\r\n    );\r\n}\r\n\r\n/**\r\n * 判断一个值是否为URLSearchParams对象\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是URLSearchParams对象，则为true，否则为false\r\n */\r\nexport const isURLSearchParams = kindOfTest('URLSearchParams');\r\n\r\n/**\r\n * 去除字符串开头和结尾的多余空格\r\n *\r\n * @param {String} str 要去除空格的字符串\r\n * @returns {String} 去除空格后的字符串\r\n */\r\nexport const trim = (str: any): string => {\r\n    return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\r\n}\r\n\r\n/**\r\n * 确定我们是否在标准浏览器环境中运行\r\n *\r\n * 这允许 axios 在 Web Worker 和 React Native 中运行。\r\n * 这两个环境都支持 XMLHttpRequest，但不支持完全标准的全局变量。\r\n *\r\n * Web Worker：\r\n *  typeof window -> undefined\r\n *  typeof document -> undefined\r\n *\r\n * React Native：\r\n *  navigator.product -> 'ReactNative'\r\n *\r\n * NativeScript：\r\n *  navigator.product -> 'NativeScript' 或 'NS'\r\n */\r\nexport const isStandardBrowserEnv = (): boolean => {\r\n    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\r\n        navigator.product === 'NativeScript' ||\r\n        navigator.product === 'NS')) {\r\n        return false;\r\n    }\r\n    return (\r\n        typeof window !== 'undefined' &&\r\n        typeof document !== 'undefined'\r\n    );\r\n}\r\n\r\n/**\r\n * 遍历数组或对象，对每个元素调用一个函数。\r\n *\r\n * 如果 `obj` 是一个数组，则对于每个元素，回调函数将被调用并传递值、索引和完整的数组。\r\n *\r\n * 如果 `obj` 是一个对象，则对于每个属性，回调函数将被调用并传递值、键和完整的对象。\r\n *\r\n * @param {Object|Array} obj 要遍历的对象\r\n * @param {Function} fn 对每个元素要调用的回调函数\r\n */\r\nexport const forEach = (obj: any, fn: any): void => {\r\n    // Don't bother if no value provided\r\n    if (obj === null || typeof obj === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    // Force an array if not already something iterable\r\n    if (typeof obj !== 'object') {\r\n        /*eslint no-param-reassign:0*/\r\n        obj = [obj];\r\n    }\r\n\r\n    if (isArray(obj)) {\r\n        // Iterate over array values\r\n        for (let i = 0, l = obj.length; i < l; i++) {\r\n            fn.call(null, obj[i], i, obj);\r\n        }\r\n    } else {\r\n        // Iterate over object keys\r\n        for (let key in obj) {\r\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n                fn.call(null, obj[key], key, obj);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 通过可变地添加对象 b 的属性来扩展对象 a。\r\n *\r\n * @param {Object} a 要扩展的对象\r\n * @param {Object} b 要复制属性的对象\r\n * @param {Object} thisArg 要绑定函数的对象\r\n * @return {Object} 对象 a 的结果值\r\n */\r\nexport const extend = (a: any, b: any, thisArg: any): any => {\r\n    forEach(b, function assignValue(val: any, key: any) {\r\n        if (thisArg && typeof val === 'function') {\r\n            a[key] = bind(val, thisArg);\r\n        } else {\r\n            a[key] = val;\r\n        }\r\n    });\r\n    return a;\r\n}\r\n\r\n/**\r\n * 删除字节顺序标记。这会捕获 EF BB BF（UTF-8 BOM）\r\n *\r\n * @param {string} content 带有 BOM 的内容\r\n * @return {string} 没有 BOM 的内容值\r\n */\r\nexport const stripBOM = (content: any): string => {\r\n    if (content.charCodeAt(0) === 0xFEFF) {\r\n        content = content.slice(1);\r\n    }\r\n    return content;\r\n}\r\n\r\n/**\r\n * 从一个构造函数继承原型方法到另一个构造函数\r\n * @param {function} constructor 构造函数\r\n * @param {function} superConstructor 父构造函数\r\n * @param {object} [props] 属性\r\n * @param {object} [descriptors] 描述符\r\n */\r\n\r\nexport const inherits = (constructor: any, superConstructor: any, props: any, descriptors: any): any => {\r\n    constructor.prototype = Object.create(superConstructor.prototype, descriptors);\r\n    constructor.prototype.constructor = constructor;\r\n    props && Object.assign(constructor.prototype, props);\r\n}\r\n\r\n/**\r\n * 将具有深度原型链的对象解析为平面对象\r\n * @param {Object} sourceObj 源对象\r\n * @param {Object} [destObj]\r\n * @param {Function} [filter]\r\n * @returns {Object}\r\n */\r\n\r\nexport const toFlatObject = (sourceObj: any, destObj: any, filter: any): any => {\r\n    let props;\r\n    let i;\r\n    let prop;\r\n    let merged: any = {};\r\n\r\n    destObj = destObj || {};\r\n\r\n    do {\r\n        props = Object.getOwnPropertyNames(sourceObj);\r\n        i = props.length;\r\n        while (i-- > 0) {\r\n            prop = props[i];\r\n            if (!merged[prop]) {\r\n                destObj[prop] = sourceObj[prop];\r\n                merged[prop] = true;\r\n            }\r\n        }\r\n        sourceObj = Object.getPrototypeOf(sourceObj);\r\n    } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\r\n\r\n    return destObj;\r\n}\r\n\r\n/**\r\n * 确定一个字符串是否以指定字符串的字符结尾\r\n * @param {String} str\r\n * @param {String} searchString\r\n * @param {Number} [position= 0]\r\n * @returns {boolean}\r\n */\r\n\r\nexport const endsWith = (str: any, searchString: any, position: any): boolean => {\r\n    str = String(str);\r\n    if (position === undefined || position > str.length) {\r\n        position = str.length;\r\n    }\r\n    position -= searchString.length;\r\n    let lastIndex = str.indexOf(searchString, position);\r\n    return lastIndex !== -1 && lastIndex === position;\r\n}\r\n\r\n\r\n/**\r\n * 从类数组对象中返回新数组\r\n * @param {*} [thing]\r\n * @returns {Array}\r\n */\r\nexport const toArray = (thing: any): Array<any> | null => {\r\n    if (!thing) return null;\r\n    let i = thing.length;\r\n    if (isUndefined(i)) return null;\r\n    let arr = new Array(i);\r\n    while (i-- > 0) {\r\n        arr[i] = thing[i];\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport const isTypedArray = (function (TypedArray): Function {\r\n    return function (thing: any): boolean {\r\n        return TypedArray && thing instanceof TypedArray;\r\n    };\r\n})(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));\r\n\r\n\r\n/**\r\n * 延迟执行\r\n * @param wait 延迟时间（毫秒），默认1000\r\n * @returns {Promise<unknown>}\r\n */\r\nexport const delay = (wait = 1000) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, wait)\r\n    })\r\n}\r\n\r\n/**\r\n * 接受可变参数，期望每个参数都是一个对象，然后\r\n * 不可变地合并每个对象的属性并返回结果。\r\n *\r\n * 当多个对象包含相同的键时，参数列表中后面的对象将优先。\r\n *\r\n * 示例：\r\n *\r\n * ```js\r\n * let result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // 输出 456\r\n * ```\r\n *\r\n * @param {Object} obj1,obj3... 要合并的对象\r\n */\r\nexport const merge = function (...args: any[]): any {\r\n    let result = arguments[0];\r\n    let assignValue = (val: any, key: any) => {\r\n        if (isPlainObject(result[key]) && isPlainObject(val)) {\r\n            result[key] = merge(result[key], val);\r\n        } else if (isPlainObject(val)) {\r\n            result[key] = merge({}, val);\r\n        } else if (isArray(val)) {\r\n            result[key] = val.slice();\r\n        } else {\r\n            result[key] = val;\r\n        }\r\n    }\r\n\r\n    for (let i = 0, l = arguments.length; i < l; i++) {\r\n        forEach(arguments[i], assignValue);\r\n    }\r\n    return result;\r\n}","import * as utils from \"./utils\";\r\n\r\nexport default utils;\r\nexport const merge = utils.merge;\r\nexport const delay = utils.delay;\r\nexport const isTypedArray = utils.isTypedArray;\r\nexport const toArray = utils.toArray;\r\nexport const endsWith = utils.endsWith;\r\nexport const toFlatObject = utils.toFlatObject;\r\nexport const inherits = utils.inherits;\r\nexport const stripBOM = utils.stripBOM;\r\nexport const extend = utils.extend;\r\nexport const forEach = utils.forEach;\r\nexport const isStandardBrowserEnv = utils.isStandardBrowserEnv;\r\nexport const trim = utils.trim;\r\nexport const isURLSearchParams = utils.isURLSearchParams;\r\nexport const isFormData = utils.isFormData;\r\nexport const isStream = utils.isStream;\r\nexport const isFunction = utils.isFunction;\r\nexport const isFileList = utils.isFileList;\r\nexport const isBlob = utils.isBlob;\r\nexport const isFile = utils.isFile;\r\nexport const isDate = utils.isDate;\r\nexport const isPlainObject = utils.isPlainObject;\r\nexport const isObject = utils.isObject;\r\nexport const isNumber = utils.isNumber;\r\nexport const isString = utils.isString;\r\nexport const isArrayBufferView = utils.isArrayBufferView;\r\nexport const isArrayBuffer = utils.isArrayBuffer;\r\nexport const isBuffer = utils.isBuffer;\r\nexport const isUndefined = utils.isUndefined;\r\nexport const isArray = utils.isArray;"],"names":["toString","kindOf","cache","thing","str","kindOfTest","type","bind","fn","thisArg","isArray","val","isUndefined","isBuffer","isArrayBuffer","isArrayBufferView","result","isString","isNumber","isObject","isPlainObject","prototype","isDate","isFile","isBlob","isFileList","isFunction","isStream","isFormData","pattern","isURLSearchParams","trim","isStandardBrowserEnv","forEach","obj","i","l","key","extend","a","b","stripBOM","content","inherits","constructor","superConstructor","props","descriptors","toFlatObject","sourceObj","destObj","filter","prop","merged","endsWith","searchString","position","lastIndex","toArray","arr","isTypedArray","TypedArray","delay","wait","resolve","merge","args","assignValue","utils.merge","utils.delay","utils.isTypedArray","utils.toArray","utils.endsWith","utils.toFlatObject","utils.inherits","utils.stripBOM","utils.extend","utils.forEach","utils.isStandardBrowserEnv","utils.trim","utils.isURLSearchParams","utils.isFormData","utils.isStream","utils.isFunction","utils.isFileList","utils.isBlob","utils.isFile","utils.isDate","utils.isPlainObject","utils.isObject","utils.isNumber","utils.isString","utils.isArrayBufferView","utils.isArrayBuffer","utils.isBuffer","utils.isUndefined","utils.isArray"],"mappings":"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"}