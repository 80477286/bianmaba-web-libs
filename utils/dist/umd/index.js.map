{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../src/index.ts"],"sourcesContent":["const toString = Object.prototype.toString;\r\nconst kindOf = ((cache): any => {\r\n    return (thing: any): any => {\r\n        let str = toString.call(thing);\r\n        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\r\n    };\r\n})(Object.create(null));\r\n\r\nconst kindOfTest = (type: any): Function => {\r\n    type = type.toLowerCase();\r\n    return function isKindOf(thing: any): boolean {\r\n        return kindOf(thing) === type;\r\n    };\r\n}\r\n\r\n\r\nconst bind = (fn: any, thisArg: any): any => {\r\n    return function wrap() {\r\n        return fn.apply(thisArg, arguments);\r\n    };\r\n}\r\n\r\n/**\r\n * 判断一个值是否为数组\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是数组，则为 true，否则为 false\r\n */\r\nexport const isArray = (val: any): boolean => {\r\n    return Array.isArray(val);\r\n}\r\n\r\n/**\r\n * 判断一个值是否为 undefined\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是 undefined，则为 true，否则为 false\r\n */\r\nexport const isUndefined = (val: any): boolean => {\r\n    return typeof val === 'undefined';\r\n}\r\n\r\n/**\r\n * 判断一个值是否为 Buffer\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是 Buffer，则为 true，否则为 false\r\n */\r\nexport const isBuffer = (val: any): boolean => {\r\n    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\r\n        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\r\n}\r\n\r\n/**\r\n * 判断一个值是否为 ArrayBuffer\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是 ArrayBuffer，则为 true，否则为 false\r\n */\r\nexport const isArrayBuffer = kindOfTest('ArrayBuffer');\r\n\r\n\r\n/**\r\n * 判断一个值是否为 ArrayBuffer 的视图\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是 ArrayBuffer 的视图，则为 true，否则为 false\r\n */\r\nexport const isArrayBufferView = (val: any): boolean => {\r\n    let result;\r\n    if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\r\n        result = ArrayBuffer.isView(val);\r\n    } else {\r\n        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 判断一个值是否为字符串\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是字符串，则为 true，否则为 false\r\n */\r\nexport const isString = (val: any): boolean => {\r\n    return typeof val === 'string';\r\n}\r\n\r\n/**\r\n * 判断一个值是否为字符串\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是字符串，则为 true，否则为 false\r\n */\r\nexport const isBoolean = (val: any): boolean => {\r\n    return typeof val === 'boolean';\r\n}\r\n\r\n/**\r\n * 确定一个值是否为数字\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是数字，则为true，否则为false\r\n */\r\nexport const isNumber = (val: any): boolean => {\r\n    return typeof val === 'number' && isFinite(val);\r\n}\r\n\r\n/**\r\n * 确定一个值是否为对象\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是对象，则为true，否则为false\r\n */\r\nexport const isObject = (val: any): boolean => {\r\n    return val != null && typeof val === 'object' && Array.isArray(val) === false;\r\n}\r\n\r\n/**\r\n * 确定一个值是否为普通对象\r\n *\r\n * @param {Object} val 要测试的值\r\n * @return {boolean} 如果值是普通对象，则为true，否则为false\r\n */\r\nexport const isPlainObject = (val: any): boolean => {\r\n    if (kindOf(val) !== 'object') {\r\n        return false;\r\n    }\r\n\r\n    let prototype = Object.getPrototypeOf(val);\r\n    return prototype === null || prototype === Object.prototype;\r\n}\r\n\r\n/**\r\n * 确定一个值是否为日期\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是日期，则为true，否则为false\r\n */\r\nexport const isDate = kindOfTest('Date');\r\n\r\n/**\r\n * 确定一个值是否为文件\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是文件，则为true，否则为false\r\n */\r\nexport const isFile = kindOfTest('File');\r\n\r\n/**\r\n * 确定一个值是否为布尔值\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是布尔值，则为true，否则为false\r\n */\r\nexport const isBlob = kindOfTest('Blob');\r\n\r\n/**\r\n * 确定一个值是否为文件列表\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是文件列表，则为true，否则为false\r\n */\r\nexport const isFileList = kindOfTest('FileList');\r\n\r\n/**\r\n * 确定一个值是否为函数\r\n *\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是函数，则为true，否则为false\r\n */\r\nexport const isFunction = (val: any): boolean => {\r\n    return toString.call(val) === '[object Function]';\r\n}\r\n\r\n/**\r\n * 确定一个值是否为流\r\n *\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是流，则为true，否则为false\r\n */\r\nexport const isStream = (val: any): boolean => {\r\n    return isObject(val) && isFunction(val.pipe);\r\n}\r\n\r\n/**\r\n * 确定一个值是否为FormData\r\n *\r\n * @param {Object} thing 要测试的值\r\n * @returns {boolean} 如果值是FormData，则为true，否则为false\r\n */\r\nexport const isFormData = (thing: any): boolean => {\r\n    let pattern = '[object FormData]';\r\n    return thing && (\r\n        (typeof FormData === 'function' && thing instanceof FormData) ||\r\n        toString.call(thing) === pattern ||\r\n        (isFunction(thing.toString) && thing.toString() === pattern)\r\n    );\r\n}\r\n\r\n/**\r\n * 判断一个值是否为URLSearchParams对象\r\n * @function\r\n * @param {Object} val 要测试的值\r\n * @returns {boolean} 如果值是URLSearchParams对象，则为true，否则为false\r\n */\r\nexport const isURLSearchParams = kindOfTest('URLSearchParams');\r\n\r\n/**\r\n * 去除字符串开头和结尾的多余空格\r\n *\r\n * @param {String} str 要去除空格的字符串\r\n * @returns {String} 去除空格后的字符串\r\n */\r\nexport const trim = (str: any): string => {\r\n    return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\r\n}\r\n\r\n/**\r\n * 确定我们是否在标准浏览器环境中运行\r\n *\r\n * 这允许 axios 在 Web Worker 和 React Native 中运行。\r\n * 这两个环境都支持 XMLHttpRequest，但不支持完全标准的全局变量。\r\n *\r\n * Web Worker：\r\n *  typeof window -> undefined\r\n *  typeof document -> undefined\r\n *\r\n * React Native：\r\n *  navigator.product -> 'ReactNative'\r\n *\r\n * NativeScript：\r\n *  navigator.product -> 'NativeScript' 或 'NS'\r\n */\r\nexport const isStandardBrowserEnv = (): boolean => {\r\n    if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\r\n        navigator.product === 'NativeScript' ||\r\n        navigator.product === 'NS')) {\r\n        return false;\r\n    }\r\n    return (\r\n        typeof window !== 'undefined' &&\r\n        typeof document !== 'undefined'\r\n    );\r\n}\r\n\r\n/**\r\n * 遍历数组或对象，对每个元素调用一个函数。\r\n *\r\n * 如果 `obj` 是一个数组，则对于每个元素，回调函数将被调用并传递值、索引和完整的数组。\r\n *\r\n * 如果 `obj` 是一个对象，则对于每个属性，回调函数将被调用并传递值、键和完整的对象。\r\n *\r\n * @param {Object|Array} obj 要遍历的对象\r\n * @param {Function} fn 对每个元素要调用的回调函数\r\n */\r\nexport const forEach = (obj: any, fn: any): void => {\r\n    // Don't bother if no value provided\r\n    if (obj === null || typeof obj === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    // Force an array if not already something iterable\r\n    if (typeof obj !== 'object') {\r\n        /*eslint no-param-reassign:0*/\r\n        obj = [obj];\r\n    }\r\n\r\n    if (isArray(obj)) {\r\n        // Iterate over array values\r\n        for (let i = 0, l = obj.length; i < l; i++) {\r\n            fn.call(null, obj[i], i, obj);\r\n        }\r\n    } else {\r\n        // Iterate over object keys\r\n        for (let key in obj) {\r\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n                fn.call(null, obj[key], key, obj);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 通过可变地添加对象 b 的属性来扩展对象 a。\r\n *\r\n * @param {Object} a 要扩展的对象\r\n * @param {Object} b 要复制属性的对象\r\n * @param {Object} thisArg 要绑定函数的对象\r\n * @return {Object} 对象 a 的结果值\r\n */\r\nexport const extend = (a: any, b: any, thisArg: any): any => {\r\n    forEach(b, function assignValue(val: any, key: any) {\r\n        if (thisArg && typeof val === 'function') {\r\n            a[key] = bind(val, thisArg);\r\n        } else {\r\n            a[key] = val;\r\n        }\r\n    });\r\n    return a;\r\n}\r\n\r\n/**\r\n * 删除字节顺序标记。这会捕获 EF BB BF（UTF-8 BOM）\r\n *\r\n * @param {string} content 带有 BOM 的内容\r\n * @return {string} 没有 BOM 的内容值\r\n */\r\nexport const stripBOM = (content: any): string => {\r\n    if (content.charCodeAt(0) === 0xFEFF) {\r\n        content = content.slice(1);\r\n    }\r\n    return content;\r\n}\r\n\r\n/**\r\n * 从一个构造函数继承原型方法到另一个构造函数\r\n * @param {function} constructor 构造函数\r\n * @param {function} superConstructor 父构造函数\r\n * @param {object} [props] 属性\r\n * @param {object} [descriptors] 描述符\r\n */\r\n\r\nexport const inherits = (constructor: any, superConstructor: any, props: any, descriptors: any): any => {\r\n    constructor.prototype = Object.create(superConstructor.prototype, descriptors);\r\n    constructor.prototype.constructor = constructor;\r\n    props && Object.assign(constructor.prototype, props);\r\n}\r\n\r\n/**\r\n * 将具有深度原型链的对象解析为平面对象\r\n * @param {Object} sourceObj 源对象\r\n * @param {Object} [destObj]\r\n * @param {Function} [filter]\r\n * @returns {Object}\r\n */\r\n\r\nexport const toFlatObject = (sourceObj: any, destObj: any, filter: any): any => {\r\n    let props;\r\n    let i;\r\n    let prop;\r\n    let merged: any = {};\r\n\r\n    destObj = destObj || {};\r\n\r\n    do {\r\n        props = Object.getOwnPropertyNames(sourceObj);\r\n        i = props.length;\r\n        while (i-- > 0) {\r\n            prop = props[i];\r\n            if (!merged[prop]) {\r\n                destObj[prop] = sourceObj[prop];\r\n                merged[prop] = true;\r\n            }\r\n        }\r\n        sourceObj = Object.getPrototypeOf(sourceObj);\r\n    } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\r\n\r\n    return destObj;\r\n}\r\n\r\n/**\r\n * 确定一个字符串是否以指定字符串的字符结尾\r\n * @param {String} str\r\n * @param {String} searchString\r\n * @param {Number} [position= 0]\r\n * @returns {boolean}\r\n */\r\n\r\nexport const endsWith = (str: any, searchString: any, position: any): boolean => {\r\n    str = String(str);\r\n    if (position === undefined || position > str.length) {\r\n        position = str.length;\r\n    }\r\n    position -= searchString.length;\r\n    let lastIndex = str.indexOf(searchString, position);\r\n    return lastIndex !== -1 && lastIndex === position;\r\n}\r\n\r\n\r\n/**\r\n * 从类数组对象中返回新数组\r\n * @param {*} [thing]\r\n * @returns {Array}\r\n */\r\nexport const toArray = (thing: any): Array<any> | null => {\r\n    if (!thing) return null;\r\n    let i = thing.length;\r\n    if (isUndefined(i)) return null;\r\n    let arr = new Array(i);\r\n    while (i-- > 0) {\r\n        arr[i] = thing[i];\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport const isTypedArray = (function (TypedArray): Function {\r\n    return function (thing: any): boolean {\r\n        return TypedArray && thing instanceof TypedArray;\r\n    };\r\n})(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));\r\n\r\n\r\n/**\r\n * 延迟执行\r\n * @param wait 延迟时间（毫秒），默认1000\r\n * @returns {Promise<unknown>}\r\n */\r\nexport const delay = (wait = 1000) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, wait)\r\n    })\r\n}\r\n\r\n/**\r\n * 接受可变参数，期望每个参数都是一个对象，然后\r\n * 不可变地合并每个对象的属性并返回结果。\r\n *\r\n * 当多个对象包含相同的键时，参数列表中后面的对象将优先。\r\n *\r\n * 示例：\r\n *\r\n * ```js\r\n * let result = merge({foo: 123}, {foo: 456});\r\n * console.log(result.foo); // 输出 456\r\n * ```\r\n *\r\n * @param {Object} obj1,obj3... 要合并的对象\r\n */\r\nexport const merge = function (...args: any[]): any {\r\n    let result = arguments[0];\r\n    let assignValue = (val: any, key: any) => {\r\n        if (isPlainObject(result[key]) && isPlainObject(val)) {\r\n            result[key] = merge(result[key], val);\r\n        } else if (isPlainObject(val)) {\r\n            result[key] = merge({}, val);\r\n        } else if (isArray(val)) {\r\n            result[key] = val.slice();\r\n        } else {\r\n            result[key] = val;\r\n        }\r\n    }\r\n\r\n    for (let i = 0, l = arguments.length; i < l; i++) {\r\n        forEach(arguments[i], assignValue);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const isEmpty = function (val: any): Boolean {\r\n    if (val == null || val == null || (isString(val) && val === '')) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport const isNotEmpty = function (val: any): Boolean {\r\n    if (val == null || val == null || (isString(val) && val === '')) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","import * as utils from \"./utils\";\r\n\r\nexport default utils;\r\nexport const merge = utils.merge;\r\nexport const delay = utils.delay;\r\nexport const isTypedArray = utils.isTypedArray;\r\nexport const toArray = utils.toArray;\r\nexport const endsWith = utils.endsWith;\r\nexport const toFlatObject = utils.toFlatObject;\r\nexport const inherits = utils.inherits;\r\nexport const stripBOM = utils.stripBOM;\r\nexport const extend = utils.extend;\r\nexport const forEach = utils.forEach;\r\nexport const isStandardBrowserEnv = utils.isStandardBrowserEnv;\r\nexport const trim = utils.trim;\r\nexport const isURLSearchParams = utils.isURLSearchParams;\r\nexport const isFormData = utils.isFormData;\r\nexport const isStream = utils.isStream;\r\nexport const isFunction = utils.isFunction;\r\nexport const isFileList = utils.isFileList;\r\nexport const isBlob = utils.isBlob;\r\nexport const isFile = utils.isFile;\r\nexport const isDate = utils.isDate;\r\nexport const isPlainObject = utils.isPlainObject;\r\nexport const isObject = utils.isObject;\r\nexport const isNumber = utils.isNumber;\r\nexport const isString = utils.isString;\r\nexport const isArrayBufferView = utils.isArrayBufferView;\r\nexport const isArrayBuffer = utils.isArrayBuffer;\r\nexport const isBuffer = utils.isBuffer;\r\nexport const isUndefined = utils.isUndefined;\r\nexport const isArray = utils.isArray;"],"names":["toString","kindOf","cache","thing","str","kindOfTest","type","bind","fn","thisArg","isArray","val","isUndefined","isBuffer","isArrayBuffer","isArrayBufferView","result","isString","isBoolean","isNumber","isObject","isPlainObject","prototype","isDate","isFile","isBlob","isFileList","isFunction","isStream","isFormData","pattern","isURLSearchParams","trim","isStandardBrowserEnv","forEach","obj","i","l","key","extend","a","b","stripBOM","content","inherits","constructor","superConstructor","props","descriptors","toFlatObject","sourceObj","destObj","filter","prop","merged","endsWith","searchString","position","lastIndex","toArray","arr","isTypedArray","TypedArray","delay","wait","resolve","merge","args","assignValue","utils.merge","utils.delay","utils.isTypedArray","utils.toArray","utils.endsWith","utils.toFlatObject","utils.inherits","utils.stripBOM","utils.extend","utils.forEach","utils.isStandardBrowserEnv","utils.trim","utils.isURLSearchParams","utils.isFormData","utils.isStream","utils.isFunction","utils.isFileList","utils.isBlob","utils.isFile","utils.isDate","utils.isPlainObject","utils.isObject","utils.isNumber","utils.isString","utils.isArrayBufferView","utils.isArrayBuffer","utils.isBuffer","utils.isUndefined","utils.isArray"],"mappings":"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"}